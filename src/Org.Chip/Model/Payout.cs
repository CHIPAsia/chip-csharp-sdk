

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.Chip.Client.OpenAPIDateConverter;

namespace Org.Chip.Model
{
    /// <summary>
    /// Record of a single payout operation. Has a status attribute, e.g. can be initialized, error or success.
    /// </summary>
    [DataContract(Name = "Payout")]
    public partial class Payout : IEquatable<Payout>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public PayoutStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Payout" /> class.
        /// </summary>
        /// <param name="payment">payment (required).</param>
        /// <param name="_client">_client (required).</param>
        /// <param name="reference">Payout reference..</param>
        /// <param name="status">status.</param>
        /// <param name="senderName">Name of payout sender..</param>
        /// <param name="brandId">ID of the brand to create this Payout for. You can copy it down in the API section, see the \&quot;specify the ID of the Brand\&quot; link in answer to \&quot;How to setup payments on website or in mobile app?\&quot;. (required).</param>
        public Payout(PaymentDetails payment = default(PaymentDetails), ClientDetails _client = default(ClientDetails), string reference = default(string), PayoutStatus? status = default(PayoutStatus?), string senderName = default(string), Guid brandId = default(Guid))
        {
            // to ensure "payment" is required (not null)
            this.Payment = payment ?? throw new ArgumentNullException("payment is a required property for Payout and cannot be null");
            // to ensure "_client" is required (not null)
            this._Client = _client ?? throw new ArgumentNullException("_client is a required property for Payout and cannot be null");
            this.BrandId = brandId;
            this.Reference = reference;
            this.Status = status;
            this.SenderName = senderName;
        }

        /// <summary>
        /// Gets or Sets Payment
        /// </summary>
        [DataMember(Name = "payment", IsRequired = true, EmitDefaultValue = false)]
        public PaymentDetails Payment { get; set; }

        /// <summary>
        /// Gets or Sets _Client
        /// </summary>
        [DataMember(Name = "client", IsRequired = true, EmitDefaultValue = false)]
        public ClientDetails _Client { get; set; }

        /// <summary>
        /// Payment method-specific, read-only, internal transaction data. Will contain information about all the transaction attempts, if available.
        /// </summary>
        /// <value>Payment method-specific, read-only, internal transaction data. Will contain information about all the transaction attempts, if available.</value>
        [DataMember(Name = "transaction_data", EmitDefaultValue = true)]
        public Object TransactionData { get; private set; }

        /// <summary>
        /// Returns false as TransactionData should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTransactionData()
        {
            return false;
        }

        /// <summary>
        /// If you don&#39;t provide an invoice &#x60;reference&#x60; yourself, this autogenerated value will be used as a reference instead.
        /// </summary>
        /// <value>If you don&#39;t provide an invoice &#x60;reference&#x60; yourself, this autogenerated value will be used as a reference instead.</value>
        [DataMember(Name = "reference_generated", EmitDefaultValue = false)]
        public string ReferenceGenerated { get; private set; }

        /// <summary>
        /// Returns false as ReferenceGenerated should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeReferenceGenerated()
        {
            return false;
        }

        /// <summary>
        /// Payout reference.
        /// </summary>
        /// <value>Payout reference.</value>
        [DataMember(Name = "reference", EmitDefaultValue = false)]
        public string Reference { get; set; }

        /// <summary>
        /// History of status changes, latest last.
        /// </summary>
        /// <value>History of status changes, latest last.</value>
        [DataMember(Name = "status_history", EmitDefaultValue = false)]
        public List<Object> StatusHistory { get; private set; }

        /// <summary>
        /// Returns false as StatusHistory should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStatusHistory()
        {
            return false;
        }

        /// <summary>
        /// Name of payout sender.
        /// </summary>
        /// <value>Name of payout sender.</value>
        [DataMember(Name = "sender_name", EmitDefaultValue = false)]
        public string SenderName { get; set; }

        /// <summary>
        /// Recipient&#39;s card&#39;s registration country. Country code in the ISO 3166-1 alpha-2 format (e.g. &#x60;GB&#x60;).
        /// </summary>
        /// <value>Recipient&#39;s card&#39;s registration country. Country code in the ISO 3166-1 alpha-2 format (e.g. &#x60;GB&#x60;).</value>
        [DataMember(Name = "recipient_card_country", EmitDefaultValue = false)]
        public string RecipientCardCountry { get; private set; }

        /// <summary>
        /// Returns false as RecipientCardCountry should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRecipientCardCountry()
        {
            return false;
        }

        /// <summary>
        /// Recipient&#39;s card&#39;s brand, e.g. &#x60;visa&#x60; or &#x60;mastercard&#x60;.
        /// </summary>
        /// <value>Recipient&#39;s card&#39;s brand, e.g. &#x60;visa&#x60; or &#x60;mastercard&#x60;.</value>
        [DataMember(Name = "recipient_card_brand", EmitDefaultValue = false)]
        public string RecipientCardBrand { get; private set; }

        /// <summary>
        /// Returns false as RecipientCardBrand should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRecipientCardBrand()
        {
            return false;
        }

        /// <summary>
        /// URL that must be used for payout execution. See details in description.
        /// </summary>
        /// <value>URL that must be used for payout execution. See details in description.</value>
        [DataMember(Name = "execution_url", EmitDefaultValue = false)]
        public string ExecutionUrl { get; private set; }

        /// <summary>
        /// Returns false as ExecutionUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeExecutionUrl()
        {
            return false;
        }

        /// <summary>
        /// ID of the brand to create this Payout for. You can copy it down in the API section, see the \&quot;specify the ID of the Brand\&quot; link in answer to \&quot;How to setup payments on website or in mobile app?\&quot;.
        /// </summary>
        /// <value>ID of the brand to create this Payout for. You can copy it down in the API section, see the \&quot;specify the ID of the Brand\&quot; link in answer to \&quot;How to setup payments on website or in mobile app?\&quot;.</value>
        [DataMember(Name = "brand_id", IsRequired = true, EmitDefaultValue = false)]
        public Guid BrandId { get; set; }

        /// <summary>
        /// Gets or Sets CompanyId
        /// </summary>
        [DataMember(Name = "company_id", EmitDefaultValue = false)]
        public Guid CompanyId { get; private set; }

        /// <summary>
        /// Returns false as CompanyId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCompanyId()
        {
            return false;
        }

        /// <summary>
        /// Indicates this is a test object, created using test API keys or using Billing section of UI while in test mode.
        /// </summary>
        /// <value>Indicates this is a test object, created using test API keys or using Billing section of UI while in test mode.</value>
        [DataMember(Name = "is_test", EmitDefaultValue = false)]
        public bool IsTest { get; private set; }

        /// <summary>
        /// Returns false as IsTest should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsTest()
        {
            return false;
        }

        /// <summary>
        /// ID of user who has created this object in the Billing UI, if applicable.
        /// </summary>
        /// <value>ID of user who has created this object in the Billing UI, if applicable.</value>
        [DataMember(Name = "user_id", EmitDefaultValue = true)]
        public Guid? UserId { get; private set; }

        /// <summary>
        /// Returns false as UserId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUserId()
        {
            return false;
        }

        /// <summary>
        /// Object type identifier
        /// </summary>
        /// <value>Object type identifier</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; private set; }

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }

        /// <summary>
        /// Object creation time
        /// </summary>
        /// <value>Object creation time</value>
        [DataMember(Name = "created_on", EmitDefaultValue = false)]
        public int CreatedOn { get; private set; }

        /// <summary>
        /// Returns false as CreatedOn should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedOn()
        {
            return false;
        }

        /// <summary>
        /// Object last modification time
        /// </summary>
        /// <value>Object last modification time</value>
        [DataMember(Name = "updated_on", EmitDefaultValue = false)]
        public int UpdatedOn { get; private set; }

        /// <summary>
        /// Returns false as UpdatedOn should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedOn()
        {
            return false;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Payout {\n");
            sb.Append("  Payment: ").Append(Payment).Append("\n");
            sb.Append("  _Client: ").Append(_Client).Append("\n");
            sb.Append("  TransactionData: ").Append(TransactionData).Append("\n");
            sb.Append("  ReferenceGenerated: ").Append(ReferenceGenerated).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusHistory: ").Append(StatusHistory).Append("\n");
            sb.Append("  SenderName: ").Append(SenderName).Append("\n");
            sb.Append("  RecipientCardCountry: ").Append(RecipientCardCountry).Append("\n");
            sb.Append("  RecipientCardBrand: ").Append(RecipientCardBrand).Append("\n");
            sb.Append("  ExecutionUrl: ").Append(ExecutionUrl).Append("\n");
            sb.Append("  BrandId: ").Append(BrandId).Append("\n");
            sb.Append("  CompanyId: ").Append(CompanyId).Append("\n");
            sb.Append("  IsTest: ").Append(IsTest).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  UpdatedOn: ").Append(UpdatedOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Payout);
        }

        /// <summary>
        /// Returns true if Payout instances are equal
        /// </summary>
        /// <param name="input">Instance of Payout to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Payout input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Payment == input.Payment ||
                    (this.Payment != null &&
                    this.Payment.Equals(input.Payment))
                ) && 
                (
                    this._Client == input._Client ||
                    (this._Client != null &&
                    this._Client.Equals(input._Client))
                ) && 
                (
                    this.TransactionData == input.TransactionData ||
                    (this.TransactionData != null &&
                    this.TransactionData.Equals(input.TransactionData))
                ) && 
                (
                    this.ReferenceGenerated == input.ReferenceGenerated ||
                    (this.ReferenceGenerated != null &&
                    this.ReferenceGenerated.Equals(input.ReferenceGenerated))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.StatusHistory == input.StatusHistory ||
                    this.StatusHistory != null &&
                    input.StatusHistory != null &&
                    this.StatusHistory.SequenceEqual(input.StatusHistory)
                ) && 
                (
                    this.SenderName == input.SenderName ||
                    (this.SenderName != null &&
                    this.SenderName.Equals(input.SenderName))
                ) && 
                (
                    this.RecipientCardCountry == input.RecipientCardCountry ||
                    (this.RecipientCardCountry != null &&
                    this.RecipientCardCountry.Equals(input.RecipientCardCountry))
                ) && 
                (
                    this.RecipientCardBrand == input.RecipientCardBrand ||
                    (this.RecipientCardBrand != null &&
                    this.RecipientCardBrand.Equals(input.RecipientCardBrand))
                ) && 
                (
                    this.ExecutionUrl == input.ExecutionUrl ||
                    (this.ExecutionUrl != null &&
                    this.ExecutionUrl.Equals(input.ExecutionUrl))
                ) && 
                (
                    this.BrandId == input.BrandId ||
                    (this.BrandId != null &&
                    this.BrandId.Equals(input.BrandId))
                ) && 
                (
                    this.CompanyId == input.CompanyId ||
                    (this.CompanyId != null &&
                    this.CompanyId.Equals(input.CompanyId))
                ) && 
                (
                    this.IsTest == input.IsTest ||
                    this.IsTest.Equals(input.IsTest)
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    this.CreatedOn.Equals(input.CreatedOn)
                ) && 
                (
                    this.UpdatedOn == input.UpdatedOn ||
                    this.UpdatedOn.Equals(input.UpdatedOn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Payment != null)
                    hashCode = hashCode * 59 + this.Payment.GetHashCode();
                if (this._Client != null)
                    hashCode = hashCode * 59 + this._Client.GetHashCode();
                if (this.TransactionData != null)
                    hashCode = hashCode * 59 + this.TransactionData.GetHashCode();
                if (this.ReferenceGenerated != null)
                    hashCode = hashCode * 59 + this.ReferenceGenerated.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusHistory != null)
                    hashCode = hashCode * 59 + this.StatusHistory.GetHashCode();
                if (this.SenderName != null)
                    hashCode = hashCode * 59 + this.SenderName.GetHashCode();
                if (this.RecipientCardCountry != null)
                    hashCode = hashCode * 59 + this.RecipientCardCountry.GetHashCode();
                if (this.RecipientCardBrand != null)
                    hashCode = hashCode * 59 + this.RecipientCardBrand.GetHashCode();
                if (this.ExecutionUrl != null)
                    hashCode = hashCode * 59 + this.ExecutionUrl.GetHashCode();
                if (this.BrandId != null)
                    hashCode = hashCode * 59 + this.BrandId.GetHashCode();
                if (this.CompanyId != null)
                    hashCode = hashCode * 59 + this.CompanyId.GetHashCode();
                hashCode = hashCode * 59 + this.IsTest.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.CreatedOn.GetHashCode();
                hashCode = hashCode * 59 + this.UpdatedOn.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Reference (string) maxLength
            if(this.Reference != null && this.Reference.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Reference, length must be less than 128.", new [] { "Reference" });
            }

            // SenderName (string) maxLength
            if(this.SenderName != null && this.SenderName.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SenderName, length must be less than 40.", new [] { "SenderName" });
            }

            yield break;
        }
    }

}
